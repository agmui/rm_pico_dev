# Generated Cmake Pico project file
cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

include(rm_pico_dev/lib/pico-sdk/pico_sdk_init.cmake)

if (PICO_SDK_VERSION_STRING VERSION_LESS "1.4.0")
  message(FATAL_ERROR "Raspberry Pi Pico SDK version 1.4.0 (or later) required. Your version is ${PICO_SDK_VERSION_STRING}")
endif()

project("app"
    VERSION 0.9.1
    DESCRIPTION "A project with nested library"
)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()


add_executable(${PROJECT_NAME})# main.cpp)
target_sources(${PROJECT_NAME}
  PRIVATE
    main.cpp
)

add_subdirectory(rm_pico_dev )
# target_link_libraries(${PROJECT_NAME} rm_pico_dev)

pico_set_program_name(${PROJECT_NAME} "canbus")
pico_set_program_version(${PROJECT_NAME} "0.1")

pico_enable_stdio_uart(${PROJECT_NAME} 0)
pico_enable_stdio_usb(${PROJECT_NAME} 1)

# Add the standard library to the build
target_link_libraries(${PROJECT_NAME}
        pico_stdlib)

# Add the standard include files to the build
target_include_directories(${PROJECT_NAME} PRIVATE
  ${CMAKE_CURRENT_LIST_DIR}
  ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts or any other standard includes, if required
)



# Add any user requested libraries
target_link_libraries(${PROJECT_NAME} 
        hardware_pio

        # can2040
        # FatFs_SPI
        rm_pico_dev

        pico_base_headers
        hardware_dma
        cmsis_core
        )


pico_add_extra_outputs(${PROJECT_NAME})

